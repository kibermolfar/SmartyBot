import random
from questions import questions_list
from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

question_num = 0
random_questions = []


async def question_engine(message: types.Message):
    global question_num  # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—É—é

    options = ["–í–∞—Ä—ñ–∞–Ω—Ç 1", "–í–∞—Ä—ñ–∞–Ω—Ç 2", "–í–∞—Ä—ñ–∞–Ω—Ç 3", "–í–∞—Ä—ñ–∞–Ω—Ç 4"]

    question = random_questions[question_num]
    question_num = question_num + 1
    question_text, answer_1, answer_2, answer_3, answer_4, right_answer = question

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è —Ä—è–¥–∞–º–∏ –ø–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup.add(KeyboardButton(options[0]), KeyboardButton(options[1]))
    markup.add(KeyboardButton(options[2]), KeyboardButton(options[3]))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    await message.answer(f"–ü–∏—Ç–∞–Ω–Ω—è ‚Ññ{question_num}\n"
                         f"{question_text}\n\n{answer_1}\n{answer_2}\n{answer_3}\n{answer_4}"
                         , reply_markup=markup)


async def test_end_handler(message: types.Message, answered_questions, right_answered_questions):

    right_answers_percent = (right_answered_questions/answered_questions)*100

    main_message_part = f"–í—ñ—Ç–∞—é, –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:\n{right_answered_questions} –∑ {answered_questions}"
    last_part = (f"\n–î–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /quiz, –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –∫–æ–º–∞–Ω–¥—É, —â–æ"
                 f" –≤–∞—Å —Ü—ñ–∫–∞–≤—Ç—åü§î")
    if right_answers_percent == 100:
        additional_part = ("\n–í—ñ–¥–º—ñ–Ω–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Çü§Ø! –¢–∏ - —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –µ–∫—Å–ø–µ—Ä—Ç —É —Ç–µ–º—ñ —Ä–æ–∑—É–º–Ω–∏—Ö –º—ñ—Å—Ç, –Ω–∞–≤—ñ—Ç—å –º–µ–Ω—ñ —î —á–æ–≥–æ"
                           " —É —Ç–µ–±–µ –Ω–∞–≤—á–∏—Ç–∏—Å—èüòé")
        await message.answer(main_message_part + additional_part + last_part, reply_markup=ReplyKeyboardRemove())
    elif right_answers_percent >= 70:
        additional_part = "\n–ß—É–¥–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞–ª–µ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É –≤–∞—Ä—Ç–æ –¥–æ–∫–ª–∞—Å—Ç–∏ —Ç—Ä–æ—à–∫–∏ –±—ñ–ª—å—à–µ –∑—É—Å–∏–ª–ª—åüòâ"
        await message.answer(main_message_part + additional_part + last_part, reply_markup=ReplyKeyboardRemove())
    elif right_answers_percent >= 50:
        additional_part = "\n–ù–µ–ø–æ–≥–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞–ª–µ —Ç–æ–±—ñ —â–µ —î —á–æ–º—É –ø–æ–≤—á–∏—Ç–∏—Å—èüòá"
        await message.answer(main_message_part + additional_part + last_part, reply_markup=ReplyKeyboardRemove())
    elif right_answers_percent >= 30:
        additional_part = ("\n–í—ñ–¥—Å–æ—Ç–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –º–µ–Ω—à–µ –Ω—ñ–∂ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—ÖüòÖ. –ú–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏"
                           " —Ç–æ–±—ñ –∑ –≤–∏–≤—á–µ–Ω–Ω—è–º —Ç–µ–º–∏ –†–æ–∑—É–º–Ω–∏—Ö –º—ñ—Å—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å–≤–æ—ó—Ö –Ω–µ–≤–µ–ª–∏—á–∫–∏—Ö —Å—Ç–∞—Ç—Ç–µ–π")
        await message.answer(main_message_part + additional_part + last_part, reply_markup=ReplyKeyboardRemove())
    elif right_answers_percent >= 1:
        additional_part = ("\n–î—É—É—É–∂–µ –º–∞–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π üò±. –ú–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏"
                           " —Ç–æ–±—ñ –∑ –≤–∏–≤—á–µ–Ω–Ω—è–º —Ç–µ–º–∏ –†–æ–∑—É–º–Ω–∏—Ö –º—ñ—Å—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å–≤–æ—ó—Ö –Ω–µ–≤–µ–ª–∏—á–∫–∏—Ö —Å—Ç–∞—Ç—Ç–µ–π")
        await message.answer(main_message_part + additional_part + last_part, reply_markup=ReplyKeyboardRemove())
    elif right_answers_percent == 0:
        additional_part = ("\n–¶–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ—Ä–æ–≥—ñ–¥–Ω—ñ—Å—Ç—å —Ü—å–æ–≥–æ —Å–ø—Ä–∞–≤–¥—ñ –º–∞–ª–∞. –ú–æ–∂–ª–∏–≤–æ"
                           " —Ç–∏ –∑—Ä–æ–±–∏–≤ —Ü–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ?üôÉ")
        await message.answer(main_message_part + additional_part + last_part, reply_markup=ReplyKeyboardRemove())


def questions_handler(requirable_questions):
    global random_questions
    if requirable_questions == 5:
        random_questions = random.sample(questions_list, 5)
        return random_questions
    elif requirable_questions == 10:
        random_questions = random.sample(questions_list, 10)
        return random_questions
    elif requirable_questions == 15:
        random_questions = random.sample(questions_list, 15)
        return random_questions


def reset_quiz():
    global question_num
    global random_questions
    question_num = 0
    random_questions = []
